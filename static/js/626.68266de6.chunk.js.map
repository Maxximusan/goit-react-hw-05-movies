{"version":3,"file":"static/js/626.68266de6.chunk.js","mappings":"oOAGaA,EAAa,SAACC,GACvB,IAAQC,EAAaD,EAAbC,SAER,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAiBA,OACI,+BACI,kBAAMC,SAjBK,SAAAC,GACfA,EAAMC,iBACe,KAAjBJ,EAAMK,QAKVP,EAASE,GACTC,EAAS,KAJLK,MAAM,sBAKb,EAQO,WAEA,mBAAQC,KAAK,SAAb,4BACA,kBACIA,KAAK,OACLC,aAAa,MACZC,WAAS,EACVC,YAAY,eACRC,SAdM,SAAAR,GACjBF,EAASE,EAAMS,cAAcZ,MAAMa,cACvC,EAaeb,MAAOA,QAK1B,E,SCpCYc,EAAsB,SAACjB,GAChC,IAAQkB,EAASlB,EAATkB,KAEFC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,8BACKF,GAAQA,EAAKG,OAAS,GAGf,wBACSH,EAAKI,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,yBACC,SAAC,KAAD,CAAOC,GAAE,UAAKD,GAAME,MAAO,CAAEC,KAAMR,GAAnC,SACOI,KAFCC,EADC,OASlB,wDAMnB,ECuDD,EA7Ee,WAGX,OAAwBtB,EAAAA,EAAAA,UAAS,IAAjC,eAAOgB,EAAP,KAAaU,EAAb,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KAmCA,OA5BAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACNC,EAAK,UAAGH,EAAYI,IAAI,gBAAnB,QAA+B,GACtCD,IACAE,EAAAA,EAAAA,IAAeF,GAAOG,MAAK,SAAAC,GACvBT,EAAQS,EAAOC,KAAKC,SACpBC,QAAQC,IAAIJ,EAAOC,KAAKC,QACvB,GAGb,GAAC,CAACT,KAoBE,iCACI,SAAC/B,EAAD,CAAYE,SAlCD,SAAAK,GACfyB,EAAe,CAACE,MAAO3B,GAC1B,KAiCO,SAACW,EAAD,CAAqBC,KAAOA,MAiCvC,C","sources":["components/SearchForm/SearchForm.jsx","components/MovieListAfterSearch/MovieListAfterSearch.jsx","pages/Movies.jsx"],"sourcesContent":["import { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const SearchForm = (props) => {\n    const { onSearch } = props\n    \n    const [value, setValue] = useState('');\n\n    const submitForm = event => {\n        event.preventDefault();\n        if (value.trim() === '') {\n            \n            alert('Your query is empty');\n            return;\n        }\n        onSearch(value);\n        setValue('')\n    };\n\n    const onInputChange = event => {\n         setValue(event.currentTarget.value.toLowerCase());\n    }\n\n    return (\n        <>\n            <form onSubmit={submitForm}>\n\n            <button type=\"submit\">Choose a film</button>\n            <input\n                type=\"text\"\n                autoComplete=\"off\"\n                 autoFocus\n                placeholder=\"Search films\"\n                    onChange={onInputChange}\n                    value={value}\n        />\n            </form>\n        </>\n    )\n}\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};","import PropTypes from \"prop-types\";\nimport { useLocation, Link } from 'react-router-dom'\n\nexport const MovieListAterSearch = (props) => {\n    const { film } = props\n    \n    const location = useLocation()\n    \n    return (\n        <>\n            {film && film.length > 0\n                ?\n                (\n                    <ul>\n                            {film.map(({ title, id }) => (\n                            <li key={id}>\n                             <Link  to={`${id}`} state={{ from: location }}>\n                                   {title}\n                                    </Link>\n                                    </li>\n                        ))}\n                    </ul>\n                ) : (\n                    <p> Please, enter a film title</p>\n                \n                    )}\n                </>\n    )\n\n}\n\nMovieListAterSearch.propTypes = {\n    film: PropTypes.arrayOf(PropTypes.object)\n};","import { useState, useEffect } from 'react'\nimport { useSearchParams} from 'react-router-dom'\n\nimport { APIsearchMovie } from '../Api/API-themoviedborg'\nimport { SearchForm } from 'components/SearchForm/SearchForm'\nimport { MovieListAterSearch } from 'components/MovieListAfterSearch/MovieListAfterSearch'\n\nconst Movies = () => {\n    \n    // const [value, setValue] = useState('');\n    const [film, setFilm] = useState([]);\n    const [searchParam, setSearchParam] = useSearchParams();\n    // const location = useLocation()\n\n    const searchFilm = event => {\n        setSearchParam({query: event})\n    }\n    \n    useEffect(() => {\n        const query = searchParam.get('query') ?? '';\n        if (query) {\n            APIsearchMovie(query).then(result => {\n                setFilm(result.data.results)\n                console.log(result.data.results)\n                }\n            )\n        }\n   },[searchParam])\n\n    // const submitForm = event => {\n    //     event.preventDefault();\n    //     if (value.trim() === '') {\n            \n    //         alert('Your query is empty');\n    //         return;\n    //     }\n    //     searchFilm(value)\n    //     setValue('')\n    // };\n\n    // const onInputChange = event => {\n    //      setValue(event.currentTarget.value.toLowerCase());\n    // }\n\n\n\n    return (\n        <>\n            <SearchForm onSearch={searchFilm} />\n            <MovieListAterSearch film={ film } />\n        {/* <form onSubmit={submitForm}>\n\n            <button type=\"submit\">Choose a film</button>\n            <input\n                type=\"text\"\n                autoComplete=\"off\"\n                 autoFocus\n                placeholder=\"Search films\"\n                onChange={onInputChange}\n        />\n            </form> */}\n            \n            {/* <div>\n            {film && film.length > 0\n                ?\n                (\n                    <ul>\n                            {film.map(({ title, id }) => (\n                            <li key={id}>\n                             <Link  to={`${id}`} state={{ from: location }}>\n                                   {title}\n                                    </Link>\n                                    </li>\n                        ))}\n                    </ul>\n                ) : (\n                    <p> Please, enter a film title</p>\n                \n                    )}\n                </div> */}\n            </>\n    )\n}\n\nexport default Movies"],"names":["SearchForm","props","onSearch","useState","value","setValue","onSubmit","event","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","MovieListAterSearch","film","location","useLocation","length","map","title","id","to","state","from","setFilm","useSearchParams","searchParam","setSearchParam","useEffect","query","get","APIsearchMovie","then","result","data","results","console","log"],"sourceRoot":""}